--------------------------------------
### Working directory ###
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella
--------------------------------------

--------------------------------------
--------------------------------------
### Aircraft Flight Loads ###
--------------------------------------
--------------------------------------

-----------------
### Current directory ###
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\initialization

Certification used from file.
Input File: drone_vla.xlsx

-----------------
### Current directory ###
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella
--------------------------------------
--------------------------------------
### Airworthiness regulations applied ###
csvla

--------------------------------------
--------------------------------------
-----------------
### Current directory ###
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla
-----------------
### Flight Envelope - per CS - VLA ###
--------------------------------------
--------------------------------------
### Standard atmosphere - Sea Level ###
--------------------------------------
Temperature [K]: 288.1500
Speed of sound [m/s]: 340.2941
Pressure [Pa]: 101325.0000
Density [kg/m^3]: 1.2250
----------------------------------------------------------------------------
--------------------------------------
### Standard atmosphere - Operative Ceiling ###
--------------------------------------
Temperature [K]: 279.7000
Speed of sound [m/s]: 335.2674
Pressure [Pa]: 86651.9492
Density [kg/m^3]: 1.0793
----------------------------------------------------------------------------
--------------------------------------
### Standard atmosphere - Theoretical Ceiling ###
--------------------------------------
Temperature [K]: 265.4000
Speed of sound [m/s]: 326.5845
Pressure [Pa]: 65764.0871
Density [kg/m^3]: 0.8632
-------------------------------------- WARNING: VH not available! 
 
 ++++ INPUT TO V - N DIAGRAM ++++
 ++++++++++ DATA USED TO PLOT V - N DIAGRAM ++++++++++ 
 VS+                VS-                 VA                VG
 19.732177          24.868023          38.465094          30.456984
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
 
 ++++++++++ DATA USED TO PLOT V - N DIAGRAM ++++++++++ 
 nmax                nmin                 VD                VE
 3.800000          -1.500000          58.386920          58.386920
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
 
 ++++++++++ DATA USED TO PLOT V - N DIAGRAM ++++++++++ 
 VC
 46.709536          
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
--------------------------------------
### Saving outpus inside correct Folder ###
Saving Vndiagram.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving Gustenvelope.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
 
 ++++++++++ FINAL ENVELOPE - VA AND nA ++++++++++ 
 VA1                nA1
 45.586655          5.337347
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
 
 CHECK: 
 Solutions are real numbers
 
 ++++++++++ FINAL ENVELOPE - VA AND nA ++++++++++ 
 Sol1                Sol2
 13.700235          45.139269
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving Finalenvelope.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
-----------------
### Aero Model - per CS - VLA ###
-----------------
### Current directory ###
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla
 
 ++++ FIGURE 6 - LIFT CURVE INTERPOLATION ++++ 
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving FullLiftModelInterpolation.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving FullDragModelInterpolation.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving FullPitchMomModelInterpolation.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
-----------------
### Balancing loads - per CS - VLA ###
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving Balancingloads.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving Wingairloads.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
-----------------
### Current directory ###
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\utilities\OpenVSP
 ++++ STARTING OPEN VSP CALCULATIONS ++++ 
 ++++ FIGURE 9 - OPEN VSP RESULTS ++++ 
-----------------
### Current directory ###
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla
 
 ++++ FIGURE 8 - 3D INTERPOLATION OF SPANWISE LIFT DISTR. ++++ 
[Warning: Vectorized content might take a long time to create, or it might contain unexpected
results. Set 'ContentType' to 'image' for better performance. <a href="matlab:warning('off', 'MATLAB:print:ContentTypeImageSuggested')">Click here</a> to not see this message
again.] 
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving ClInterpolation3dplot.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
 
 ++++ FIGURE 9 - 3D INTERPOLATION OF SPANWISE LIFT DISTR. ++++ 
[Warning: Vectorized content might take a long time to create, or it might contain unexpected
results. Set 'ContentType' to 'image' for better performance. <a href="matlab:warning('off', 'MATLAB:print:ContentTypeImageSuggested')">Click here</a> to not see this message
again.] 
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving CdInterpolation3dplot.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
 
 ++++ FIGURE 10 - 3D INTERPOLATION OF SPANWISE LIFT DISTR. ++++ 
[Warning: Vectorized content might take a long time to create, or it might contain unexpected
results. Set 'ContentType' to 'image' for better performance. <a href="matlab:warning('off', 'MATLAB:print:ContentTypeImageSuggested')">Click here</a> to not see this message
again.] 
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving CmInterpolation3dplot.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
 
 ++++ FIGURE 11 - LIFT MODELS AND FLIGHT ENVELOPE POINTS ++++ 
[Warning: 'ContentType' parameter is ignored when it is set to 'vector' for image output.] 
Saving LiftComparisonWithPoints.pdf in: 
C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\Output
<a href="matlab: opentoline('C:\Users\claum\OneDrive\Desktop\TesiMagistrale\tesi-magistrale-claudio-mirabella\csvla\CalcShearBendTorsMom.m',2817,1)">2817 </a>        k_cl            = (b*0.5)/S;
if system_dependent('IsDebugMode')==1, dbstep; end
        for i = 1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.cl_interpolated.value(:,1))
            global_CL(i) = k_cl * trapz(half_span, cl_interpolated(:,i).*chord_distribution);
            if (global_CL(i) >= 1.0-tol) && (global_CL(i) <= 1.0+tol)
                    CL_equal_to_one = cl_interpolated(:, i);
            end
        end
              %% POINT S CALCULATIONS                 
            % Lift coefficient distribution along the span at the Point S
            cl_S = CL_S*CL_equal_to_one; % LIFT COEFFICIENT TIMES LIFT DISTRIBUTION ALONG THE SEMI-SPAN
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cl_S.value = cl_S;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cl_S.Attributes.unit = "Non dimensional";      

            % Selection of the interpolated distribution of CD and CM
            CD_S                     = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.CD_S.value;
            CM_S                     = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.CM_S.value;
            cd_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value';
            cm_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value';
            k_cd                     = (b*0.5)/S;
            k_cm                     = (b*0.5)/S;
            Interpolated_Global_CD_S = zeros(length(cd_interpolated(1,:)), 1);
            Interpolated_Global_CM_S = zeros(length(cd_interpolated(1,:)), 1);
            check_interp = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value;
            if exist('check_interp', 'var') == 1
                for i = 1:length(cd_interpolated(1,:))
                    Interpolated_Global_CD_S(i) = k_cd * trapz(half_span, cd_interpolated(:,i).*chord_distribution);
                    Interpolated_Global_CM_S(i) = k_cm * trapz(half_span, cm_interpolated(:,i).*chord_distribution);
                    if abs(Interpolated_Global_CD_S(i) - CD_S) < 1e-1
                       cd_S = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value(i,:)';
                    else
                       cd_S = CD_S * ones(length(cd_interpolated(1,:)),1);
                    end
                    if abs(Interpolated_Global_CM_S(i) - CM_S) < 1e-1
                       cm_S = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value(i,:)';
                    else
                       cm_S = CM_S * ones(length(cd_interpolated(1,:)),1);
                    end
                end
            elseif exist('check_interp', 'var') == 0
                cd_S = CD_S * ones(length(cd_interpolated(1,:)),1);
                cm_S = CM_S * ones(length(cd_interpolated(1,:)),1);
            end
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.Interpolated_Global_CD.value = Interpolated_Global_CD_S;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.Interpolated_Global_CD.Attributes.unit = "Non dimensional";
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cd_S.value = cd_S;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cm_S.value = cm_S;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cd_S.Attributes.unit = "Non dimensional";
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cm_S.Attributes.unit = "Non dimensional";
            % -------------------------------------------------------------   
            % Selection of the interpolated distribution of CD and CM
            CD_S                     = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.CD_S.value;
            CM_S                     = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.CM_S.value;
            cd_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value';
            cm_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value';
            k_cd                     = (b*0.5)/S;
            k_cm                     = (b*0.5)/S;
            Interpolated_Global_CD_S = zeros(length(cd_interpolated(1,:)), 1);
            Interpolated_Global_CM_S = zeros(length(cd_interpolated(1,:)), 1);
            check_interp = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value;
            if exist('check_interp', 'var') == 1
                for i = 1:length(cd_interpolated(1,:))
                    Interpolated_Global_CD_S(i) = k_cd * trapz(half_span, cd_interpolated(:,i).*chord_distribution);
                    Interpolated_Global_CM_S(i) = k_cm * trapz(half_span, cm_interpolated(:,i).*chord_distribution^2);
                    if abs(Interpolated_Global_CD_S(i) - CD_S) < 1e-1
                       cd_S = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value(i,:)';
                    else
                       cd_S = CD_S * ones(length(cd_interpolated(1,:)),1);
                    end
                    if abs(Interpolated_Global_CM_S(i) - CM_S) < 1e-1
                       cm_S = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value(i,:)';
                    else
                       cm_S = CM_S * ones(length(cd_interpolated(1,:)),1);
                    end
                end
            elseif exist('check_interp', 'var') == 0
                cd_S = CD_S * ones(length(cd_interpolated(1,:)),1);
                cm_S = CM_S * ones(length(cd_interpolated(1,:)),1);
            end
{Error using <a href="matlab:matlab.internal.language.introspective.errorDocCallback('mpower', 'C:\Program Files\MATLAB\R2021a\toolbox\matlab\ops\mpower.m', 51)" style="font-weight:bold"> ^ </a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2021a\toolbox\matlab\ops\mpower.m',51,0)">line 51</a>)
Incorrect dimensions for raising a matrix to a power. Check that the matrix is square and the power
is a scalar. To perform elementwise matrix powers, use '.^'.
} 
            % Selection of the interpolated distribution of CD and CM
            CD_S                     = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.CD_S.value;
            CM_S                     = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.CM_S.value;
            cd_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value';
            cm_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value';
            k_cd                     = (b*0.5)/S;
            k_cm                     = (b*0.5)/S;
            Interpolated_Global_CD_S = zeros(length(cd_interpolated(1,:)), 1);
            Interpolated_Global_CM_S = zeros(length(cd_interpolated(1,:)), 1);
            check_interp = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value;
            if exist('check_interp', 'var') == 1
                for i = 1:length(cd_interpolated(1,:))
                    Interpolated_Global_CD_S(i) = k_cd * trapz(half_span, cd_interpolated(:,i).*chord_distribution);
                    Interpolated_Global_CM_S(i) = k_cm * trapz(half_span, cm_interpolated(:,i).*chord_distribution.^2);
                    if abs(Interpolated_Global_CD_S(i) - CD_S) < 1e-1
                       cd_S = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value(i,:)';
                    else
                       cd_S = CD_S * ones(length(cd_interpolated(1,:)),1);
                    end
                    if abs(Interpolated_Global_CM_S(i) - CM_S) < 1e-1
                       cm_S = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value(i,:)';
                    else
                       cm_S = CM_S * ones(length(cd_interpolated(1,:)),1);
                    end
                end
            elseif exist('check_interp', 'var') == 0
                cd_S = CD_S * ones(length(cd_interpolated(1,:)),1);
                cm_S = CM_S * ones(length(cd_interpolated(1,:)),1);
            end
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.Interpolated_Global_CD.value = Interpolated_Global_CD_S;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.Interpolated_Global_CD.Attributes.unit = "Non dimensional";
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cd_S.value = cd_S;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cm_S.value = cm_S;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cd_S.Attributes.unit = "Non dimensional";
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointS.cm_S.Attributes.unit = "Non dimensional";
            % ------------------------------------------------------------- 
            % Lift coefficient distribution along the span at the Point A1
            cl_A1 = CL_A1 * CL_equal_to_one; % LIFT COEFFICIENT TIMES LIFT DISTRIBUTION ALONG THE SEMI-SPAN
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cl_A.value = cl_A1;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cl_A.Attributes.unit = "Non dimensional";

            % Support variables to interpolate
            x   = 1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.OpenVSP.Cd.value(7,:));
            y   = 1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.OpenVSP.Cd.value(:,1));
            xi  = 1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.OpenVSP.Cd.value(7,:));
            yi  = 1:0.1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.OpenVSP.Cd.value(:,1));        


            % Selection of the interpolated distribution of CD and CM
            CD_A1                    = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.CD_A1.value;
            CM_A1                    = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.CM_A1.value;
            cd_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value';
            cm_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value';
            k_cd                     = (b*0.5)/S;
            k_cm                     = (b*0.5)/S;
            Interpolated_Global_CD_A1 = zeros(length(cd_interpolated(1,:)), 1);
            Interpolated_Global_CM_A1 = zeros(length(cd_interpolated(1,:)), 1);
            check_interp = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value;
            if exist('check_interp', 'var') == 1
                for i = 1:length(yi)
                     Interpolated_Global_CD_A1(i) = k_cd * trapz(half_span, cd_interpolated(:,i).*chord_distribution);
                     Interpolated_Global_CD_A1(i) = k_cd * trapz(half_span, cd_interpolated(:,i).*chord_distribution);
                     if abs(Interpolated_Global_CD_A1(i) - CD_A1) < 1e-1
                       cd_A1 = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value(i,:)';
                       cm_A1 = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value(i,:)';
                       check = 1;
                     end
                     if abs(Interpolated_Global_CM_A1(i) - CM_A1) < 1e-1
                       cm_A1 = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value(i,:)';
                     end
                end
                if exist('check') == 0
                    cd_A1 = CD_A1 * ones(length(xi),1);
                    cm_A1 = CM_A1 * ones(length(xi),1);
                end
            elseif exist('check_interp', 'var') == 0
                cd_A1 = CD_A1 * ones(length(xi),1);
                cm_A1 = CM_A1 * ones(length(xi),1);
            end
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.Interpolated_Global_CD.value = Interpolated_Global_CD_A1;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.Interpolated_Global_CD.Attributes.unit = "Non dimensional";
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cd_A1.value = cd_A1;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cm_A1.value = cm_A1;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cd_A1.Attributes.unit = "Non dimensional";
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cm_A1.Attributes.unit = "Non dimensional";
            % -------------------------------------------------------------      
            % Lift coefficient distribution along the span at the Point A1
            cl_A1 = CL_A1 * CL_equal_to_one; % LIFT COEFFICIENT TIMES LIFT DISTRIBUTION ALONG THE SEMI-SPAN
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cl_A.value = cl_A1;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cl_A.Attributes.unit = "Non dimensional";

            % Support variables to interpolate
            x   = 1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.OpenVSP.Cd.value(7,:));
            y   = 1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.OpenVSP.Cd.value(:,1));
            xi  = 1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.OpenVSP.Cd.value(7,:));
            yi  = 1:0.1:length(Aircraft.Certification.Regulation.SubpartC.Flightloads.Balancingloads.OpenVSP.Cd.value(:,1));        


            % Selection of the interpolated distribution of CD and CM
            CD_A1                    = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.CD_A1.value;
            CM_A1                    = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.CM_A1.value;
            cd_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value';
            cm_interpolated          = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value';
            k_cd                     = (b*0.5)/S;
            k_cm                     = (b*0.5)/S;
            Interpolated_Global_CD_A1 = zeros(length(cd_interpolated(1,:)), 1);
            Interpolated_Global_CM_A1 = zeros(length(cd_interpolated(1,:)), 1);
            check_interp = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value;
            if exist('check_interp', 'var') == 1
                for i = 1:length(yi)
                     Interpolated_Global_CD_A1(i) = k_cd * trapz(half_span, cd_interpolated(:,i).*chord_distribution);
                     Interpolated_Global_CM_A1(i) = k_cd * trapz(half_span, cm_interpolated(:,i).*chord_distribution);
                     if abs(Interpolated_Global_CD_A1(i) - CD_A1) < 1e-1
                       cd_A1 = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cd.value(i,:)';
                       cm_A1 = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value(i,:)';
                       check = 1;
                     end
                     if abs(Interpolated_Global_CM_A1(i) - CM_A1) < 1e-1
                       cm_A1 = Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.Interpolated_Cm.value(i,:)';
                     end
                end
                if exist('check') == 0
                    cd_A1 = CD_A1 * ones(length(xi),1);
                    cm_A1 = CM_A1 * ones(length(xi),1);
                end
            elseif exist('check_interp', 'var') == 0
                cd_A1 = CD_A1 * ones(length(xi),1);
                cm_A1 = CM_A1 * ones(length(xi),1);
            end
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.Interpolated_Global_CD.value = Interpolated_Global_CD_A1;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.Interpolated_Global_CD.Attributes.unit = "Non dimensional";
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cd_A1.value = cd_A1;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cm_A1.value = cm_A1;
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cd_A1.Attributes.unit = "Non dimensional";
            Aircraft.Certification.Regulation.SubpartC.Flightloads.Final_envelope.PointA1.cm_A1.Attributes.unit = "Non dimensional";
            % -------------------------------------------------------------   
Interpolated_Global_CM_A1

Interpolated_Global_CM_A1 =

   -0.4388
   -0.4379
   -0.4369
   -0.4360
   -0.4351
   -0.4342
   -0.4333
   -0.4325
   -0.4317
   -0.4309
   -0.4302
   -0.4294
   -0.4287
   -0.4281
   -0.4274
   -0.4268
   -0.4262
   -0.4257
   -0.4252
   -0.4247
   -0.4242
   -0.4237
   -0.4233
   -0.4230
   -0.4226
   -0.4223
   -0.4220
   -0.4218
   -0.4215
   -0.4213
   -0.4212
   -0.4211
   -0.4210
   -0.4209
   -0.4209
   -0.4209
   -0.4209
   -0.4210
   -0.4211
   -0.4213
   -0.4214
   -0.4217
   -0.4219
   -0.4222
   -0.4225
   -0.4228
   -0.4232
   -0.4236
   -0.4241
   -0.4246
   -0.4251
   -0.4256
   -0.4262
   -0.4268
   -0.4275
   -0.4282
   -0.4289
   -0.4297
   -0.4305
   -0.4313
   -0.4322
   -0.4331
   -0.4340
   -0.4350
   -0.4360
   -0.4370
   -0.4381
   -0.4392
   -0.4404
   -0.4416
   -0.4428
   -0.4440
   -0.4453
   -0.4466
   -0.4480
   -0.4493
   -0.4508
   -0.4522
   -0.4537
   -0.4552
   -0.4568
   -0.4583
   -0.4600
   -0.4616
   -0.4633
   -0.4650
   -0.4668
   -0.4686
   -0.4704
   -0.4722
   -0.4741
   -0.4760
   -0.4780
   -0.4799
   -0.4819
   -0.4840
   -0.4860
   -0.4881
   -0.4902
   -0.4924
   -0.4946
   -0.4968
   -0.4990
   -0.5013
   -0.5036
   -0.5059
   -0.5083
   -0.5106
   -0.5130
   -0.5155
   -0.5179
   -0.5204
   -0.5229
   -0.5254
   -0.5280
   -0.5306
   -0.5332
   -0.5358
   -0.5384
   -0.5411
   -0.5438
   -0.5465
   -0.5492
   -0.5520
   -0.5548
   -0.5576
   -0.5604
   -0.5632
   -0.5661
   -0.5689
   -0.5718

